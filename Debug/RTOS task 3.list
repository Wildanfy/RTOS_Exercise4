
RTOS task 3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002688  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002798  08002798  00003798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002840  08002840  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002840  08002840  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002840  08002840  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002840  08002840  00003840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002844  08002844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002848  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd4  20000010  08002858  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fe4  08002858  00004fe4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007565  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  0000b59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000d230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065e  00000000  00000000  0000dac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173c8  00000000  00000000  0000e126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009981  00000000  00000000  000254ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000878e9  00000000  00000000  0002ee6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6758  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020ac  00000000  00000000  000b679c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b8848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08002780 	.word	0x08002780

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08002780 	.word	0x08002780

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	@ 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 f9b7 	bl	80004f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f849 	bl	8000220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f883 	bl	8000298 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b1d      	ldr	r3, [pc, #116]	@ (8000208 <main+0x88>)
 8000194:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000198:	461d      	mov	r5, r3
 800019a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80001aa:	2100      	movs	r1, #0
 80001ac:	4618      	mov	r0, r3
 80001ae:	f001 f8bf 	bl	8001330 <osThreadCreate>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a15      	ldr	r2, [pc, #84]	@ (800020c <main+0x8c>)
 80001b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of GreenLEDTask */
  osThreadDef(GreenLEDTask, green_led, osPriorityNormal, 0, 128);
 80001b8:	4b15      	ldr	r3, [pc, #84]	@ (8000210 <main+0x90>)
 80001ba:	f107 0420 	add.w	r4, r7, #32
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GreenLEDTaskHandle = osThreadCreate(osThread(GreenLEDTask), NULL);
 80001cc:	f107 0320 	add.w	r3, r7, #32
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 f8ac 	bl	8001330 <osThreadCreate>
 80001d8:	4603      	mov	r3, r0
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <main+0x94>)
 80001dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of RedLEDTask */
  osThreadDef(RedLEDTask, red_led, osPriorityAboveNormal, 0, 128);
 80001de:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <main+0x98>)
 80001e0:	1d3c      	adds	r4, r7, #4
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RedLEDTaskHandle = osThreadCreate(osThread(RedLEDTask), NULL);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 f89b 	bl	8001330 <osThreadCreate>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a07      	ldr	r2, [pc, #28]	@ (800021c <main+0x9c>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000200:	f001 f88f 	bl	8001322 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000204:	bf00      	nop
 8000206:	e7fd      	b.n	8000204 <main+0x84>
 8000208:	080027a4 	.word	0x080027a4
 800020c:	20000280 	.word	0x20000280
 8000210:	080027d0 	.word	0x080027d0
 8000214:	20000284 	.word	0x20000284
 8000218:	080027f8 	.word	0x080027f8
 800021c:	20000288 	.word	0x20000288

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	@ 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	@ 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f002 fa7a 	bl	8002728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000242:	2302      	movs	r3, #2
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800024a:	2310      	movs	r3, #16
 800024c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fc6e 	bl	8000b38 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000262:	f000 f8b7 	bl	80003d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fedc 	bl	800103c <HAL_RCC_ClockConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800028a:	f000 f8a3 	bl	80003d4 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3740      	adds	r7, #64	@ 0x40
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b086      	sub	sp, #24
 800029c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b0e      	ldr	r3, [pc, #56]	@ (80002f4 <MX_GPIO_Init+0x5c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0304 	and.w	r3, r3, #4
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green_led_task_Pin|green_led_Pin|red_led_task_Pin|red_led_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2133      	movs	r1, #51	@ 0x33
 80002c8:	480b      	ldr	r0, [pc, #44]	@ (80002f8 <MX_GPIO_Init+0x60>)
 80002ca:	f000 fc03 	bl	8000ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_led_task_Pin green_led_Pin red_led_task_Pin red_led_Pin */
  GPIO_InitStruct.Pin = green_led_task_Pin|green_led_Pin|red_led_task_Pin|red_led_Pin;
 80002ce:	2333      	movs	r3, #51	@ 0x33
 80002d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2302      	movs	r3, #2
 80002dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	4619      	mov	r1, r3
 80002e4:	4804      	ldr	r0, [pc, #16]	@ (80002f8 <MX_GPIO_Init+0x60>)
 80002e6:	f000 fa71 	bl	80007cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	3718      	adds	r7, #24
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	40021000 	.word	0x40021000
 80002f8:	40010800 	.word	0x40010800

080002fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000304:	2001      	movs	r0, #1
 8000306:	f001 f85f 	bl	80013c8 <osDelay>
 800030a:	e7fb      	b.n	8000304 <StartDefaultTask+0x8>

0800030c <green_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_green_led */
void green_led(void const * argument)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN green_led */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 1);
 8000314:	2201      	movs	r2, #1
 8000316:	2101      	movs	r1, #1
 8000318:	4814      	ldr	r0, [pc, #80]	@ (800036c <green_led+0x60>)
 800031a:	f000 fbdb 	bl	8000ad4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green_led_GPIO_Port, green_led_Pin, 0);
 800031e:	2200      	movs	r2, #0
 8000320:	2102      	movs	r1, #2
 8000322:	4812      	ldr	r0, [pc, #72]	@ (800036c <green_led+0x60>)
 8000324:	f000 fbd6 	bl	8000ad4 <HAL_GPIO_WritePin>
	for (int var = 0; var < 80; ++var) {
 8000328:	2300      	movs	r3, #0
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	e010      	b.n	8000350 <green_led+0x44>
	HAL_GPIO_TogglePin(green_led_GPIO_Port, green_led_Pin);
 800032e:	2102      	movs	r1, #2
 8000330:	480e      	ldr	r0, [pc, #56]	@ (800036c <green_led+0x60>)
 8000332:	f000 fbe7 	bl	8000b04 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 8000336:	2019      	movs	r0, #25
 8000338:	f000 f940 	bl	80005bc <HAL_Delay>
	HAL_GPIO_TogglePin(green_led_GPIO_Port, green_led_Pin);
 800033c:	2102      	movs	r1, #2
 800033e:	480b      	ldr	r0, [pc, #44]	@ (800036c <green_led+0x60>)
 8000340:	f000 fbe0 	bl	8000b04 <HAL_GPIO_TogglePin>
	HAL_Delay(25);
 8000344:	2019      	movs	r0, #25
 8000346:	f000 f939 	bl	80005bc <HAL_Delay>
	for (int var = 0; var < 80; ++var) {
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	3301      	adds	r3, #1
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2b4f      	cmp	r3, #79	@ 0x4f
 8000354:	ddeb      	ble.n	800032e <green_led+0x22>
	}
    HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	2101      	movs	r1, #1
 800035a:	4804      	ldr	r0, [pc, #16]	@ (800036c <green_led+0x60>)
 800035c:	f000 fbba 	bl	8000ad4 <HAL_GPIO_WritePin>
    osDelay(6000);
 8000360:	f241 7070 	movw	r0, #6000	@ 0x1770
 8000364:	f001 f830 	bl	80013c8 <osDelay>
	HAL_GPIO_WritePin(green_led_task_GPIO_Port, green_led_task_Pin, 1);
 8000368:	e7d4      	b.n	8000314 <green_led+0x8>
 800036a:	bf00      	nop
 800036c:	40010800 	.word	0x40010800

08000370 <red_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_red_led */
void red_led(void const * argument)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN red_led */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 1);
 8000378:	2201      	movs	r2, #1
 800037a:	2110      	movs	r1, #16
 800037c:	4814      	ldr	r0, [pc, #80]	@ (80003d0 <red_led+0x60>)
 800037e:	f000 fba9 	bl	8000ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red_led_GPIO_Port, red_led_Pin, 0);
 8000382:	2200      	movs	r2, #0
 8000384:	2120      	movs	r1, #32
 8000386:	4812      	ldr	r0, [pc, #72]	@ (80003d0 <red_led+0x60>)
 8000388:	f000 fba4 	bl	8000ad4 <HAL_GPIO_WritePin>
		for (int var = 0; var < 10; ++var) {
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e010      	b.n	80003b4 <red_led+0x44>
		HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 8000392:	2120      	movs	r1, #32
 8000394:	480e      	ldr	r0, [pc, #56]	@ (80003d0 <red_led+0x60>)
 8000396:	f000 fbb5 	bl	8000b04 <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 800039a:	2019      	movs	r0, #25
 800039c:	f000 f90e 	bl	80005bc <HAL_Delay>
		HAL_GPIO_TogglePin(red_led_GPIO_Port, red_led_Pin);
 80003a0:	2120      	movs	r1, #32
 80003a2:	480b      	ldr	r0, [pc, #44]	@ (80003d0 <red_led+0x60>)
 80003a4:	f000 fbae 	bl	8000b04 <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 80003a8:	2019      	movs	r0, #25
 80003aa:	f000 f907 	bl	80005bc <HAL_Delay>
		for (int var = 0; var < 10; ++var) {
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3301      	adds	r3, #1
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	2b09      	cmp	r3, #9
 80003b8:	ddeb      	ble.n	8000392 <red_led+0x22>
		}
	    HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <red_led+0x60>)
 80003c0:	f000 fb88 	bl	8000ad4 <HAL_GPIO_WritePin>
	    osDelay(1500);
 80003c4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80003c8:	f000 fffe 	bl	80013c8 <osDelay>
		HAL_GPIO_WritePin(red_led_task_GPIO_Port, red_led_task_Pin, 1);
 80003cc:	e7d4      	b.n	8000378 <red_led+0x8>
 80003ce:	bf00      	nop
 80003d0:	40010800 	.word	0x40010800

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
}
 80003da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b084      	sub	sp, #16
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b18      	ldr	r3, [pc, #96]	@ (8000448 <HAL_MspInit+0x68>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a17      	ldr	r2, [pc, #92]	@ (8000448 <HAL_MspInit+0x68>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b15      	ldr	r3, [pc, #84]	@ (8000448 <HAL_MspInit+0x68>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b12      	ldr	r3, [pc, #72]	@ (8000448 <HAL_MspInit+0x68>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a11      	ldr	r2, [pc, #68]	@ (8000448 <HAL_MspInit+0x68>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <HAL_MspInit+0x68>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000416:	2200      	movs	r2, #0
 8000418:	210f      	movs	r1, #15
 800041a:	f06f 0001 	mvn.w	r0, #1
 800041e:	f000 f9ac 	bl	800077a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000422:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <HAL_MspInit+0x6c>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	4a04      	ldr	r2, [pc, #16]	@ (800044c <HAL_MspInit+0x6c>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	bf00      	nop
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40021000 	.word	0x40021000
 800044c:	40010000 	.word	0x40010000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <NMI_Handler+0x4>

08000458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <MemManage_Handler+0x4>

08000468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <UsageFault_Handler+0x4>

08000478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000488:	f000 f87c 	bl	8000584 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800048c:	f001 fd26 	bl	8001edc <xTaskGetSchedulerState>
 8000490:	4603      	mov	r3, r0
 8000492:	2b01      	cmp	r3, #1
 8000494:	d001      	beq.n	800049a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000496:	f001 ff17 	bl	80022c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}

0800049e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a2:	bf00      	nop
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
	...

080004ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004ac:	f7ff fff7 	bl	800049e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480b      	ldr	r0, [pc, #44]	@ (80004e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004b2:	490c      	ldr	r1, [pc, #48]	@ (80004e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004b4:	4a0c      	ldr	r2, [pc, #48]	@ (80004e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a09      	ldr	r2, [pc, #36]	@ (80004ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004c8:	4c09      	ldr	r4, [pc, #36]	@ (80004f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004d6:	f002 f92f 	bl	8002738 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff fe51 	bl	8000180 <main>
  bx lr
 80004de:	4770      	bx	lr
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80004e8:	08002848 	.word	0x08002848
  ldr r2, =_sbss
 80004ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80004f0:	20000fe4 	.word	0x20000fe4

080004f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f4:	e7fe      	b.n	80004f4 <ADC1_2_IRQHandler>
	...

080004f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <HAL_Init+0x28>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	@ (8000520 <HAL_Init+0x28>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f92b 	bl	8000764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	200f      	movs	r0, #15
 8000510:	f000 f808 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f7ff ff64 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40022000 	.word	0x40022000

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f935 	bl	80007b2 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f90b 	bl	800077a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	@ (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000000 	.word	0x20000000
 800057c:	20000008 	.word	0x20000008
 8000580:	20000004 	.word	0x20000004

08000584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_IncTick+0x1c>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b05      	ldr	r3, [pc, #20]	@ (80005a4 <HAL_IncTick+0x20>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a03      	ldr	r2, [pc, #12]	@ (80005a4 <HAL_IncTick+0x20>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr
 80005a0:	20000008 	.word	0x20000008
 80005a4:	2000028c 	.word	0x2000028c

080005a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return uwTick;
 80005ac:	4b02      	ldr	r3, [pc, #8]	@ (80005b8 <HAL_GetTick+0x10>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	2000028c 	.word	0x2000028c

080005bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	f7ff fff0 	bl	80005a8 <HAL_GetTick>
 80005c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d4:	d005      	beq.n	80005e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <HAL_Delay+0x44>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005e2:	bf00      	nop
 80005e4:	f7ff ffe0 	bl	80005a8 <HAL_GetTick>
 80005e8:	4602      	mov	r2, r0
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f7      	bhi.n	80005e4 <HAL_Delay+0x28>
  {
  }
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000008 	.word	0x20000008

08000604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f003 0307 	and.w	r3, r3, #7
 8000612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000614:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061a:	68ba      	ldr	r2, [r7, #8]
 800061c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000620:	4013      	ands	r3, r2
 8000622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800062c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	@ (8000648 <__NVIC_SetPriorityGrouping+0x44>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00

0800064c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <__NVIC_GetPriorityGrouping+0x18>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	0a1b      	lsrs	r3, r3, #8
 8000656:	f003 0307 	and.w	r3, r3, #7
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000ed00 	.word	0xe000ed00

08000668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	db0a      	blt.n	8000692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	b2da      	uxtb	r2, r3
 8000680:	490c      	ldr	r1, [pc, #48]	@ (80006b4 <__NVIC_SetPriority+0x4c>)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000690:	e00a      	b.n	80006a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4908      	ldr	r1, [pc, #32]	@ (80006b8 <__NVIC_SetPriority+0x50>)
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	3b04      	subs	r3, #4
 80006a0:	0112      	lsls	r2, r2, #4
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	761a      	strb	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e100 	.word	0xe000e100
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006bc:	b480      	push	{r7}
 80006be:	b089      	sub	sp, #36	@ 0x24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f003 0307 	and.w	r3, r3, #7
 80006ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d0:	69fb      	ldr	r3, [r7, #28]
 80006d2:	f1c3 0307 	rsb	r3, r3, #7
 80006d6:	2b04      	cmp	r3, #4
 80006d8:	bf28      	it	cs
 80006da:	2304      	movcs	r3, #4
 80006dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3304      	adds	r3, #4
 80006e2:	2b06      	cmp	r3, #6
 80006e4:	d902      	bls.n	80006ec <NVIC_EncodePriority+0x30>
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3b03      	subs	r3, #3
 80006ea:	e000      	b.n	80006ee <NVIC_EncodePriority+0x32>
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 32ff 	mov.w	r2, #4294967295
 80006f4:	69bb      	ldr	r3, [r7, #24]
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	43da      	mvns	r2, r3
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	401a      	ands	r2, r3
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000704:	f04f 31ff 	mov.w	r1, #4294967295
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	43d9      	mvns	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	4313      	orrs	r3, r2
         );
}
 8000716:	4618      	mov	r0, r3
 8000718:	3724      	adds	r7, #36	@ 0x24
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000730:	d301      	bcc.n	8000736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000732:	2301      	movs	r3, #1
 8000734:	e00f      	b.n	8000756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000736:	4a0a      	ldr	r2, [pc, #40]	@ (8000760 <SysTick_Config+0x40>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3b01      	subs	r3, #1
 800073c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073e:	210f      	movs	r1, #15
 8000740:	f04f 30ff 	mov.w	r0, #4294967295
 8000744:	f7ff ff90 	bl	8000668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <SysTick_Config+0x40>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074e:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <SysTick_Config+0x40>)
 8000750:	2207      	movs	r2, #7
 8000752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000754:	2300      	movs	r3, #0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	e000e010 	.word	0xe000e010

08000764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff49 	bl	8000604 <__NVIC_SetPriorityGrouping>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800077a:	b580      	push	{r7, lr}
 800077c:	b086      	sub	sp, #24
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800078c:	f7ff ff5e 	bl	800064c <__NVIC_GetPriorityGrouping>
 8000790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	68b9      	ldr	r1, [r7, #8]
 8000796:	6978      	ldr	r0, [r7, #20]
 8000798:	f7ff ff90 	bl	80006bc <NVIC_EncodePriority>
 800079c:	4602      	mov	r2, r0
 800079e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a2:	4611      	mov	r1, r2
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff5f 	bl	8000668 <__NVIC_SetPriority>
}
 80007aa:	bf00      	nop
 80007ac:	3718      	adds	r7, #24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ffb0 	bl	8000720 <SysTick_Config>
 80007c0:	4603      	mov	r3, r0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b08b      	sub	sp, #44	@ 0x2c
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007de:	e169      	b.n	8000ab4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007e0:	2201      	movs	r2, #1
 80007e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	69fa      	ldr	r2, [r7, #28]
 80007f0:	4013      	ands	r3, r2
 80007f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	f040 8158 	bne.w	8000aae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	4a9a      	ldr	r2, [pc, #616]	@ (8000a6c <HAL_GPIO_Init+0x2a0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d05e      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000808:	4a98      	ldr	r2, [pc, #608]	@ (8000a6c <HAL_GPIO_Init+0x2a0>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d875      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800080e:	4a98      	ldr	r2, [pc, #608]	@ (8000a70 <HAL_GPIO_Init+0x2a4>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d058      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000814:	4a96      	ldr	r2, [pc, #600]	@ (8000a70 <HAL_GPIO_Init+0x2a4>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d86f      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800081a:	4a96      	ldr	r2, [pc, #600]	@ (8000a74 <HAL_GPIO_Init+0x2a8>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d052      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000820:	4a94      	ldr	r2, [pc, #592]	@ (8000a74 <HAL_GPIO_Init+0x2a8>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d869      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000826:	4a94      	ldr	r2, [pc, #592]	@ (8000a78 <HAL_GPIO_Init+0x2ac>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d04c      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 800082c:	4a92      	ldr	r2, [pc, #584]	@ (8000a78 <HAL_GPIO_Init+0x2ac>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d863      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000832:	4a92      	ldr	r2, [pc, #584]	@ (8000a7c <HAL_GPIO_Init+0x2b0>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d046      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
 8000838:	4a90      	ldr	r2, [pc, #576]	@ (8000a7c <HAL_GPIO_Init+0x2b0>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d85d      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 800083e:	2b12      	cmp	r3, #18
 8000840:	d82a      	bhi.n	8000898 <HAL_GPIO_Init+0xcc>
 8000842:	2b12      	cmp	r3, #18
 8000844:	d859      	bhi.n	80008fa <HAL_GPIO_Init+0x12e>
 8000846:	a201      	add	r2, pc, #4	@ (adr r2, 800084c <HAL_GPIO_Init+0x80>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	080008c7 	.word	0x080008c7
 8000850:	080008a1 	.word	0x080008a1
 8000854:	080008b3 	.word	0x080008b3
 8000858:	080008f5 	.word	0x080008f5
 800085c:	080008fb 	.word	0x080008fb
 8000860:	080008fb 	.word	0x080008fb
 8000864:	080008fb 	.word	0x080008fb
 8000868:	080008fb 	.word	0x080008fb
 800086c:	080008fb 	.word	0x080008fb
 8000870:	080008fb 	.word	0x080008fb
 8000874:	080008fb 	.word	0x080008fb
 8000878:	080008fb 	.word	0x080008fb
 800087c:	080008fb 	.word	0x080008fb
 8000880:	080008fb 	.word	0x080008fb
 8000884:	080008fb 	.word	0x080008fb
 8000888:	080008fb 	.word	0x080008fb
 800088c:	080008fb 	.word	0x080008fb
 8000890:	080008a9 	.word	0x080008a9
 8000894:	080008bd 	.word	0x080008bd
 8000898:	4a79      	ldr	r2, [pc, #484]	@ (8000a80 <HAL_GPIO_Init+0x2b4>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d013      	beq.n	80008c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800089e:	e02c      	b.n	80008fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e029      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e024      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	3308      	adds	r3, #8
 80008b8:	623b      	str	r3, [r7, #32]
          break;
 80008ba:	e01f      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	330c      	adds	r3, #12
 80008c2:	623b      	str	r3, [r7, #32]
          break;
 80008c4:	e01a      	b.n	80008fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ce:	2304      	movs	r3, #4
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e013      	b.n	80008fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d105      	bne.n	80008e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008dc:	2308      	movs	r3, #8
 80008de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	611a      	str	r2, [r3, #16]
          break;
 80008e6:	e009      	b.n	80008fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e8:	2308      	movs	r3, #8
 80008ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	615a      	str	r2, [r3, #20]
          break;
 80008f2:	e003      	b.n	80008fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	e000      	b.n	80008fc <HAL_GPIO_Init+0x130>
          break;
 80008fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	2bff      	cmp	r3, #255	@ 0xff
 8000900:	d801      	bhi.n	8000906 <HAL_GPIO_Init+0x13a>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	e001      	b.n	800090a <HAL_GPIO_Init+0x13e>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3304      	adds	r3, #4
 800090a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	2bff      	cmp	r3, #255	@ 0xff
 8000910:	d802      	bhi.n	8000918 <HAL_GPIO_Init+0x14c>
 8000912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	e002      	b.n	800091e <HAL_GPIO_Init+0x152>
 8000918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800091a:	3b08      	subs	r3, #8
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	210f      	movs	r1, #15
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	fa01 f303 	lsl.w	r3, r1, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	401a      	ands	r2, r3
 8000930:	6a39      	ldr	r1, [r7, #32]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	fa01 f303 	lsl.w	r3, r1, r3
 8000938:	431a      	orrs	r2, r3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	2b00      	cmp	r3, #0
 8000948:	f000 80b1 	beq.w	8000aae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800094c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a84 <HAL_GPIO_Init+0x2b8>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a4c      	ldr	r2, [pc, #304]	@ (8000a84 <HAL_GPIO_Init+0x2b8>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b4a      	ldr	r3, [pc, #296]	@ (8000a84 <HAL_GPIO_Init+0x2b8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000964:	4a48      	ldr	r2, [pc, #288]	@ (8000a88 <HAL_GPIO_Init+0x2bc>)
 8000966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000968:	089b      	lsrs	r3, r3, #2
 800096a:	3302      	adds	r3, #2
 800096c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000970:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000974:	f003 0303 	and.w	r3, r3, #3
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	220f      	movs	r2, #15
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4013      	ands	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a40      	ldr	r2, [pc, #256]	@ (8000a8c <HAL_GPIO_Init+0x2c0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d013      	beq.n	80009b8 <HAL_GPIO_Init+0x1ec>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a3f      	ldr	r2, [pc, #252]	@ (8000a90 <HAL_GPIO_Init+0x2c4>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d00d      	beq.n	80009b4 <HAL_GPIO_Init+0x1e8>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a94 <HAL_GPIO_Init+0x2c8>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d007      	beq.n	80009b0 <HAL_GPIO_Init+0x1e4>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a3d      	ldr	r2, [pc, #244]	@ (8000a98 <HAL_GPIO_Init+0x2cc>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d101      	bne.n	80009ac <HAL_GPIO_Init+0x1e0>
 80009a8:	2303      	movs	r3, #3
 80009aa:	e006      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009ac:	2304      	movs	r3, #4
 80009ae:	e004      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b0:	2302      	movs	r3, #2
 80009b2:	e002      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <HAL_GPIO_Init+0x1ee>
 80009b8:	2300      	movs	r3, #0
 80009ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009bc:	f002 0203 	and.w	r2, r2, #3
 80009c0:	0092      	lsls	r2, r2, #2
 80009c2:	4093      	lsls	r3, r2
 80009c4:	68fa      	ldr	r2, [r7, #12]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009ca:	492f      	ldr	r1, [pc, #188]	@ (8000a88 <HAL_GPIO_Init+0x2bc>)
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	089b      	lsrs	r3, r3, #2
 80009d0:	3302      	adds	r3, #2
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009e4:	4b2d      	ldr	r3, [pc, #180]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	492c      	ldr	r1, [pc, #176]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	608b      	str	r3, [r1, #8]
 80009f0:	e006      	b.n	8000a00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009f2:	4b2a      	ldr	r3, [pc, #168]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	4928      	ldr	r1, [pc, #160]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d006      	beq.n	8000a1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a0c:	4b23      	ldr	r3, [pc, #140]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	4922      	ldr	r1, [pc, #136]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a12:	69bb      	ldr	r3, [r7, #24]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60cb      	str	r3, [r1, #12]
 8000a18:	e006      	b.n	8000a28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a1a:	4b20      	ldr	r3, [pc, #128]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	491e      	ldr	r1, [pc, #120]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a36:	685a      	ldr	r2, [r3, #4]
 8000a38:	4918      	ldr	r1, [pc, #96]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	604b      	str	r3, [r1, #4]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4914      	ldr	r1, [pc, #80]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d021      	beq.n	8000aa0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	490e      	ldr	r1, [pc, #56]	@ (8000a9c <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
 8000a68:	e021      	b.n	8000aae <HAL_GPIO_Init+0x2e2>
 8000a6a:	bf00      	nop
 8000a6c:	10320000 	.word	0x10320000
 8000a70:	10310000 	.word	0x10310000
 8000a74:	10220000 	.word	0x10220000
 8000a78:	10210000 	.word	0x10210000
 8000a7c:	10120000 	.word	0x10120000
 8000a80:	10110000 	.word	0x10110000
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010000 	.word	0x40010000
 8000a8c:	40010800 	.word	0x40010800
 8000a90:	40010c00 	.word	0x40010c00
 8000a94:	40011000 	.word	0x40011000
 8000a98:	40011400 	.word	0x40011400
 8000a9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <HAL_GPIO_Init+0x304>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	4909      	ldr	r1, [pc, #36]	@ (8000ad0 <HAL_GPIO_Init+0x304>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aba:	fa22 f303 	lsr.w	r3, r2, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	f47f ae8e 	bne.w	80007e0 <HAL_GPIO_Init+0x14>
  }
}
 8000ac4:	bf00      	nop
 8000ac6:	bf00      	nop
 8000ac8:	372c      	adds	r7, #44	@ 0x2c
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	807b      	strh	r3, [r7, #2]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae4:	787b      	ldrb	r3, [r7, #1]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aea:	887a      	ldrh	r2, [r7, #2]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000af0:	e003      	b.n	8000afa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	041a      	lsls	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	611a      	str	r2, [r3, #16]
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b16:	887a      	ldrh	r2, [r7, #2]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	43d9      	mvns	r1, r3
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	400b      	ands	r3, r1
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	611a      	str	r2, [r3, #16]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr
	...

08000b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d101      	bne.n	8000b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e272      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 8087 	beq.w	8000c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b58:	4b92      	ldr	r3, [pc, #584]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	d00c      	beq.n	8000b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b64:	4b8f      	ldr	r3, [pc, #572]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 030c 	and.w	r3, r3, #12
 8000b6c:	2b08      	cmp	r3, #8
 8000b6e:	d112      	bne.n	8000b96 <HAL_RCC_OscConfig+0x5e>
 8000b70:	4b8c      	ldr	r3, [pc, #560]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b7c:	d10b      	bne.n	8000b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7e:	4b89      	ldr	r3, [pc, #548]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d06c      	beq.n	8000c64 <HAL_RCC_OscConfig+0x12c>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d168      	bne.n	8000c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e24c      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b9e:	d106      	bne.n	8000bae <HAL_RCC_OscConfig+0x76>
 8000ba0:	4b80      	ldr	r3, [pc, #512]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a7f      	ldr	r2, [pc, #508]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e02e      	b.n	8000c0c <HAL_RCC_OscConfig+0xd4>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10c      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x98>
 8000bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a7a      	ldr	r2, [pc, #488]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	4b78      	ldr	r3, [pc, #480]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a77      	ldr	r2, [pc, #476]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e01d      	b.n	8000c0c <HAL_RCC_OscConfig+0xd4>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0xbc>
 8000bda:	4b72      	ldr	r3, [pc, #456]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a71      	ldr	r2, [pc, #452]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b6f      	ldr	r3, [pc, #444]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a6e      	ldr	r2, [pc, #440]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e00b      	b.n	8000c0c <HAL_RCC_OscConfig+0xd4>
 8000bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a6a      	ldr	r2, [pc, #424]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b68      	ldr	r3, [pc, #416]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a67      	ldr	r2, [pc, #412]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d013      	beq.n	8000c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c14:	f7ff fcc8 	bl	80005a8 <HAL_GetTick>
 8000c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c1a:	e008      	b.n	8000c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c1c:	f7ff fcc4 	bl	80005a8 <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	2b64      	cmp	r3, #100	@ 0x64
 8000c28:	d901      	bls.n	8000c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e200      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f0      	beq.n	8000c1c <HAL_RCC_OscConfig+0xe4>
 8000c3a:	e014      	b.n	8000c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c3c:	f7ff fcb4 	bl	80005a8 <HAL_GetTick>
 8000c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c42:	e008      	b.n	8000c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c44:	f7ff fcb0 	bl	80005a8 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b64      	cmp	r3, #100	@ 0x64
 8000c50:	d901      	bls.n	8000c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c52:	2303      	movs	r3, #3
 8000c54:	e1ec      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c56:	4b53      	ldr	r3, [pc, #332]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f0      	bne.n	8000c44 <HAL_RCC_OscConfig+0x10c>
 8000c62:	e000      	b.n	8000c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d063      	beq.n	8000d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c72:	4b4c      	ldr	r3, [pc, #304]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00b      	beq.n	8000c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c7e:	4b49      	ldr	r3, [pc, #292]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 030c 	and.w	r3, r3, #12
 8000c86:	2b08      	cmp	r3, #8
 8000c88:	d11c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x18c>
 8000c8a:	4b46      	ldr	r3, [pc, #280]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d116      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c96:	4b43      	ldr	r3, [pc, #268]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <HAL_RCC_OscConfig+0x176>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d001      	beq.n	8000cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e1c0      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cae:	4b3d      	ldr	r3, [pc, #244]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	695b      	ldr	r3, [r3, #20]
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4939      	ldr	r1, [pc, #228]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc2:	e03a      	b.n	8000d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d020      	beq.n	8000d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ccc:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <HAL_RCC_OscConfig+0x270>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd2:	f7ff fc69 	bl	80005a8 <HAL_GetTick>
 8000cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cd8:	e008      	b.n	8000cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cda:	f7ff fc65 	bl	80005a8 <HAL_GetTick>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	1ad3      	subs	r3, r2, r3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d901      	bls.n	8000cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e1a1      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cec:	4b2d      	ldr	r3, [pc, #180]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f0      	beq.n	8000cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4927      	ldr	r1, [pc, #156]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	600b      	str	r3, [r1, #0]
 8000d0c:	e015      	b.n	8000d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d0e:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <HAL_RCC_OscConfig+0x270>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d14:	f7ff fc48 	bl	80005a8 <HAL_GetTick>
 8000d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1a:	e008      	b.n	8000d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d1c:	f7ff fc44 	bl	80005a8 <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d901      	bls.n	8000d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	e180      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f0      	bne.n	8000d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d03a      	beq.n	8000dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d019      	beq.n	8000d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <HAL_RCC_OscConfig+0x274>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d54:	f7ff fc28 	bl	80005a8 <HAL_GetTick>
 8000d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d5a:	e008      	b.n	8000d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fc24 	bl	80005a8 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d901      	bls.n	8000d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e160      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000da4 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f0      	beq.n	8000d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f000 fa9c 	bl	80012b8 <RCC_Delay>
 8000d80:	e01c      	b.n	8000dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <HAL_RCC_OscConfig+0x274>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d88:	f7ff fc0e 	bl	80005a8 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d8e:	e00f      	b.n	8000db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d90:	f7ff fc0a 	bl	80005a8 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d908      	bls.n	8000db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e146      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000
 8000da8:	42420000 	.word	0x42420000
 8000dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db0:	4b92      	ldr	r3, [pc, #584]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1e9      	bne.n	8000d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80a6 	beq.w	8000f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dce:	4b8b      	ldr	r3, [pc, #556]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10d      	bne.n	8000df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b88      	ldr	r3, [pc, #544]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a87      	ldr	r2, [pc, #540]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b85      	ldr	r3, [pc, #532]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000df2:	2301      	movs	r3, #1
 8000df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df6:	4b82      	ldr	r3, [pc, #520]	@ (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d118      	bne.n	8000e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e02:	4b7f      	ldr	r3, [pc, #508]	@ (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a7e      	ldr	r2, [pc, #504]	@ (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fbcb 	bl	80005a8 <HAL_GetTick>
 8000e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e14:	e008      	b.n	8000e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e16:	f7ff fbc7 	bl	80005a8 <HAL_GetTick>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	2b64      	cmp	r3, #100	@ 0x64
 8000e22:	d901      	bls.n	8000e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e24:	2303      	movs	r3, #3
 8000e26:	e103      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	4b75      	ldr	r3, [pc, #468]	@ (8001000 <HAL_RCC_OscConfig+0x4c8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0f0      	beq.n	8000e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d106      	bne.n	8000e4a <HAL_RCC_OscConfig+0x312>
 8000e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	4a6e      	ldr	r2, [pc, #440]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6213      	str	r3, [r2, #32]
 8000e48:	e02d      	b.n	8000ea6 <HAL_RCC_OscConfig+0x36e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d10c      	bne.n	8000e6c <HAL_RCC_OscConfig+0x334>
 8000e52:	4b6a      	ldr	r3, [pc, #424]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a69      	ldr	r2, [pc, #420]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	f023 0301 	bic.w	r3, r3, #1
 8000e5c:	6213      	str	r3, [r2, #32]
 8000e5e:	4b67      	ldr	r3, [pc, #412]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	4a66      	ldr	r2, [pc, #408]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e64:	f023 0304 	bic.w	r3, r3, #4
 8000e68:	6213      	str	r3, [r2, #32]
 8000e6a:	e01c      	b.n	8000ea6 <HAL_RCC_OscConfig+0x36e>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d10c      	bne.n	8000e8e <HAL_RCC_OscConfig+0x356>
 8000e74:	4b61      	ldr	r3, [pc, #388]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a60      	ldr	r2, [pc, #384]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6213      	str	r3, [r2, #32]
 8000e80:	4b5e      	ldr	r3, [pc, #376]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4a5d      	ldr	r2, [pc, #372]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6213      	str	r3, [r2, #32]
 8000e8c:	e00b      	b.n	8000ea6 <HAL_RCC_OscConfig+0x36e>
 8000e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4a5a      	ldr	r2, [pc, #360]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	f023 0301 	bic.w	r3, r3, #1
 8000e98:	6213      	str	r3, [r2, #32]
 8000e9a:	4b58      	ldr	r3, [pc, #352]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	4a57      	ldr	r2, [pc, #348]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000ea0:	f023 0304 	bic.w	r3, r3, #4
 8000ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	68db      	ldr	r3, [r3, #12]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d015      	beq.n	8000eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fb7b 	bl	80005a8 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb4:	e00a      	b.n	8000ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fb77 	bl	80005a8 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e0b1      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0ee      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x37e>
 8000ed8:	e014      	b.n	8000f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eda:	f7ff fb65 	bl	80005a8 <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee0:	e00a      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ee2:	f7ff fb61 	bl	80005a8 <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e09b      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ef8:	4b40      	ldr	r3, [pc, #256]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000efa:	6a1b      	ldr	r3, [r3, #32]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1ee      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d105      	bne.n	8000f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69db      	ldr	r3, [r3, #28]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8087 	beq.w	800102e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f20:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 030c 	and.w	r3, r3, #12
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d061      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d146      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f34:	4b33      	ldr	r3, [pc, #204]	@ (8001004 <HAL_RCC_OscConfig+0x4cc>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fb35 	bl	80005a8 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f42:	f7ff fb31 	bl	80005a8 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e06d      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f54:	4b29      	ldr	r3, [pc, #164]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a1b      	ldr	r3, [r3, #32]
 8000f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f68:	d108      	bne.n	8000f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f6a:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4921      	ldr	r1, [pc, #132]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a19      	ldr	r1, [r3, #32]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8c:	430b      	orrs	r3, r1
 8000f8e:	491b      	ldr	r1, [pc, #108]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f94:	4b1b      	ldr	r3, [pc, #108]	@ (8001004 <HAL_RCC_OscConfig+0x4cc>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9a:	f7ff fb05 	bl	80005a8 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa2:	f7ff fb01 	bl	80005a8 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e03d      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0f0      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x46a>
 8000fc0:	e035      	b.n	800102e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_RCC_OscConfig+0x4cc>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff faee 	bl	80005a8 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fd0:	f7ff faea 	bl	80005a8 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e026      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_RCC_OscConfig+0x4c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x498>
 8000fee:	e01e      	b.n	800102e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d107      	bne.n	8001008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e019      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40007000 	.word	0x40007000
 8001004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_RCC_OscConfig+0x500>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a1b      	ldr	r3, [r3, #32]
 8001018:	429a      	cmp	r2, r3
 800101a:	d106      	bne.n	800102a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001026:	429a      	cmp	r2, r3
 8001028:	d001      	beq.n	800102e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e0d0      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001050:	4b6a      	ldr	r3, [pc, #424]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d910      	bls.n	8001080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800105e:	4b67      	ldr	r3, [pc, #412]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 0207 	bic.w	r2, r3, #7
 8001066:	4965      	ldr	r1, [pc, #404]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	4313      	orrs	r3, r2
 800106c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800106e:	4b63      	ldr	r3, [pc, #396]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e0b8      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d020      	beq.n	80010ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001098:	4b59      	ldr	r3, [pc, #356]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	4a58      	ldr	r2, [pc, #352]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 800109e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80010a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b0:	4b53      	ldr	r3, [pc, #332]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a52      	ldr	r2, [pc, #328]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80010b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80010ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010bc:	4b50      	ldr	r3, [pc, #320]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	494d      	ldr	r1, [pc, #308]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d040      	beq.n	800115c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d107      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b47      	ldr	r3, [pc, #284]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d115      	bne.n	800111a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e07f      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d107      	bne.n	800110a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fa:	4b41      	ldr	r3, [pc, #260]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e073      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110a:	4b3d      	ldr	r3, [pc, #244]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d101      	bne.n	800111a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e06b      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800111a:	4b39      	ldr	r3, [pc, #228]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f023 0203 	bic.w	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4936      	ldr	r1, [pc, #216]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800112c:	f7ff fa3c 	bl	80005a8 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001132:	e00a      	b.n	800114a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001134:	f7ff fa38 	bl	80005a8 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001142:	4293      	cmp	r3, r2
 8001144:	d901      	bls.n	800114a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e053      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800114a:	4b2d      	ldr	r3, [pc, #180]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 020c 	and.w	r2, r3, #12
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	429a      	cmp	r2, r3
 800115a:	d1eb      	bne.n	8001134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800115c:	4b27      	ldr	r3, [pc, #156]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 0307 	and.w	r3, r3, #7
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	429a      	cmp	r2, r3
 8001168:	d210      	bcs.n	800118c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 0207 	bic.w	r2, r3, #7
 8001172:	4922      	ldr	r1, [pc, #136]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <HAL_RCC_ClockConfig+0x1c0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d001      	beq.n	800118c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e032      	b.n	80011f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d008      	beq.n	80011aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	4916      	ldr	r1, [pc, #88]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d009      	beq.n	80011ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011b6:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	490e      	ldr	r1, [pc, #56]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ca:	f000 f821 	bl	8001210 <HAL_RCC_GetSysClockFreq>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_RCC_ClockConfig+0x1c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	091b      	lsrs	r3, r3, #4
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	490a      	ldr	r1, [pc, #40]	@ (8001204 <HAL_RCC_ClockConfig+0x1c8>)
 80011dc:	5ccb      	ldrb	r3, [r1, r3]
 80011de:	fa22 f303 	lsr.w	r3, r2, r3
 80011e2:	4a09      	ldr	r2, [pc, #36]	@ (8001208 <HAL_RCC_ClockConfig+0x1cc>)
 80011e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_RCC_ClockConfig+0x1d0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f99a 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40022000 	.word	0x40022000
 8001200:	40021000 	.word	0x40021000
 8001204:	0800281c 	.word	0x0800281c
 8001208:	20000000 	.word	0x20000000
 800120c:	20000004 	.word	0x20000004

08001210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 030c 	and.w	r3, r3, #12
 8001236:	2b04      	cmp	r3, #4
 8001238:	d002      	beq.n	8001240 <HAL_RCC_GetSysClockFreq+0x30>
 800123a:	2b08      	cmp	r3, #8
 800123c:	d003      	beq.n	8001246 <HAL_RCC_GetSysClockFreq+0x36>
 800123e:	e027      	b.n	8001290 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001240:	4b19      	ldr	r3, [pc, #100]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001242:	613b      	str	r3, [r7, #16]
      break;
 8001244:	e027      	b.n	8001296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	0c9b      	lsrs	r3, r3, #18
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	4a17      	ldr	r2, [pc, #92]	@ (80012ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d010      	beq.n	8001280 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	0c5b      	lsrs	r3, r3, #17
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	4a11      	ldr	r2, [pc, #68]	@ (80012b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a0d      	ldr	r2, [pc, #52]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001272:	fb03 f202 	mul.w	r2, r3, r2
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	fbb2 f3f3 	udiv	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e004      	b.n	800128a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001284:	fb02 f303 	mul.w	r3, r2, r3
 8001288:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	613b      	str	r3, [r7, #16]
      break;
 800128e:	e002      	b.n	8001296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001292:	613b      	str	r3, [r7, #16]
      break;
 8001294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001296:	693b      	ldr	r3, [r7, #16]
}
 8001298:	4618      	mov	r0, r3
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	007a1200 	.word	0x007a1200
 80012ac:	0800282c 	.word	0x0800282c
 80012b0:	0800283c 	.word	0x0800283c
 80012b4:	003d0900 	.word	0x003d0900

080012b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <RCC_Delay+0x34>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <RCC_Delay+0x38>)
 80012c6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ca:	0a5b      	lsrs	r3, r3, #9
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012d4:	bf00      	nop
  }
  while (Delay --);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1e5a      	subs	r2, r3, #1
 80012da:	60fa      	str	r2, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1f9      	bne.n	80012d4 <RCC_Delay+0x1c>
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr
 80012ec:	20000000 	.word	0x20000000
 80012f0:	10624dd3 	.word	0x10624dd3

080012f4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001302:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001306:	2b84      	cmp	r3, #132	@ 0x84
 8001308:	d005      	beq.n	8001316 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800130a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	3303      	adds	r3, #3
 8001314:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001326:	f000 fadf 	bl	80018e8 <vTaskStartScheduler>
  
  return osOK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	bd80      	pop	{r7, pc}

08001330 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001332:	b089      	sub	sp, #36	@ 0x24
 8001334:	af04      	add	r7, sp, #16
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d020      	beq.n	8001384 <osThreadCreate+0x54>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d01c      	beq.n	8001384 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685c      	ldr	r4, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691e      	ldr	r6, [r3, #16]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffc9 	bl	80012f4 <makeFreeRtosPriority>
 8001362:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800136c:	9202      	str	r2, [sp, #8]
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	9100      	str	r1, [sp, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4632      	mov	r2, r6
 8001376:	4629      	mov	r1, r5
 8001378:	4620      	mov	r0, r4
 800137a:	f000 f8e8 	bl	800154e <xTaskCreateStatic>
 800137e:	4603      	mov	r3, r0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	e01c      	b.n	80013be <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685c      	ldr	r4, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001390:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffab 	bl	80012f4 <makeFreeRtosPriority>
 800139e:	4602      	mov	r2, r0
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9200      	str	r2, [sp, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4632      	mov	r2, r6
 80013ac:	4629      	mov	r1, r5
 80013ae:	4620      	mov	r0, r4
 80013b0:	f000 f92d 	bl	800160e <xTaskCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d001      	beq.n	80013be <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <osDelay+0x16>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	e000      	b.n	80013e0 <osDelay+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	4618      	mov	r0, r3
 80013e2:	f000 fa4b 	bl	800187c <vTaskDelay>
  
  return osOK;
 80013e6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f103 0208 	add.w	r2, r3, #8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f103 0208 	add.w	r2, r3, #8
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f103 0208 	add.w	r2, r3, #8
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr

0800148c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a2:	d103      	bne.n	80014ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	e00c      	b.n	80014c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3308      	adds	r3, #8
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e002      	b.n	80014ba <vListInsert+0x2e>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d2f6      	bcs.n	80014b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6892      	ldr	r2, [r2, #8]
 8001512:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6852      	ldr	r2, [r2, #4]
 800151c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	d103      	bne.n	8001530 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800154e:	b580      	push	{r7, lr}
 8001550:	b08e      	sub	sp, #56	@ 0x38
 8001552:	af04      	add	r7, sp, #16
 8001554:	60f8      	str	r0, [r7, #12]
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800155c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10b      	bne.n	800157a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001566:	f383 8811 	msr	BASEPRI, r3
 800156a:	f3bf 8f6f 	isb	sy
 800156e:	f3bf 8f4f 	dsb	sy
 8001572:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800157a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10b      	bne.n	8001598 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	61fb      	str	r3, [r7, #28]
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001598:	2354      	movs	r3, #84	@ 0x54
 800159a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	2b54      	cmp	r3, #84	@ 0x54
 80015a0:	d00b      	beq.n	80015ba <xTaskCreateStatic+0x6c>
	__asm volatile
 80015a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015a6:	f383 8811 	msr	BASEPRI, r3
 80015aa:	f3bf 8f6f 	isb	sy
 80015ae:	f3bf 8f4f 	dsb	sy
 80015b2:	61bb      	str	r3, [r7, #24]
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	e7fd      	b.n	80015b6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80015ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80015bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d01e      	beq.n	8001600 <xTaskCreateStatic+0xb2>
 80015c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01b      	beq.n	8001600 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80015c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80015cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80015d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d4:	2202      	movs	r2, #2
 80015d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80015da:	2300      	movs	r3, #0
 80015dc:	9303      	str	r3, [sp, #12]
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	9302      	str	r3, [sp, #8]
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 f850 	bl	8001698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80015f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015fa:	f000 f8d5 	bl	80017a8 <prvAddNewTaskToReadyList>
 80015fe:	e001      	b.n	8001604 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001604:	697b      	ldr	r3, [r7, #20]
	}
 8001606:	4618      	mov	r0, r3
 8001608:	3728      	adds	r7, #40	@ 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800160e:	b580      	push	{r7, lr}
 8001610:	b08c      	sub	sp, #48	@ 0x30
 8001612:	af04      	add	r7, sp, #16
 8001614:	60f8      	str	r0, [r7, #12]
 8001616:	60b9      	str	r1, [r7, #8]
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4613      	mov	r3, r2
 800161c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 fe94 	bl	8002350 <pvPortMalloc>
 8001628:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00e      	beq.n	800164e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001630:	2054      	movs	r0, #84	@ 0x54
 8001632:	f000 fe8d 	bl	8002350 <pvPortMalloc>
 8001636:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	631a      	str	r2, [r3, #48]	@ 0x30
 8001644:	e005      	b.n	8001652 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f000 ff50 	bl	80024ec <vPortFree>
 800164c:	e001      	b.n	8001652 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d017      	beq.n	8001688 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001660:	88fa      	ldrh	r2, [r7, #6]
 8001662:	2300      	movs	r3, #0
 8001664:	9303      	str	r3, [sp, #12]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68b9      	ldr	r1, [r7, #8]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 f80e 	bl	8001698 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800167c:	69f8      	ldr	r0, [r7, #28]
 800167e:	f000 f893 	bl	80017a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
 8001686:	e002      	b.n	800168e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
 800168c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800168e:	69bb      	ldr	r3, [r7, #24]
	}
 8001690:	4618      	mov	r0, r3
 8001692:	3720      	adds	r7, #32
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80016a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80016b0:	3b01      	subs	r3, #1
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f023 0307 	bic.w	r3, r3, #7
 80016be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d00b      	beq.n	80016e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80016ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016ce:	f383 8811 	msr	BASEPRI, r3
 80016d2:	f3bf 8f6f 	isb	sy
 80016d6:	f3bf 8f4f 	dsb	sy
 80016da:	617b      	str	r3, [r7, #20]
}
 80016dc:	bf00      	nop
 80016de:	bf00      	nop
 80016e0:	e7fd      	b.n	80016de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d01f      	beq.n	8001728 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	e012      	b.n	8001714 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	7819      	ldrb	r1, [r3, #0]
 80016f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	4413      	add	r3, r2
 80016fc:	3334      	adds	r3, #52	@ 0x34
 80016fe:	460a      	mov	r2, r1
 8001700:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4413      	add	r3, r2
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d006      	beq.n	800171c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3301      	adds	r3, #1
 8001712:	61fb      	str	r3, [r7, #28]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d9e9      	bls.n	80016ee <prvInitialiseNewTask+0x56>
 800171a:	e000      	b.n	800171e <prvInitialiseNewTask+0x86>
			{
				break;
 800171c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800171e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001726:	e003      	b.n	8001730 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001732:	2b06      	cmp	r3, #6
 8001734:	d901      	bls.n	800173a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001736:	2306      	movs	r3, #6
 8001738:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800173a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800173c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800173e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001744:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001748:	2200      	movs	r2, #0
 800174a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800174c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800174e:	3304      	adds	r3, #4
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fe6c 	bl	800142e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001758:	3318      	adds	r3, #24
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe67 	bl	800142e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001762:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001764:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001768:	f1c3 0207 	rsb	r2, r3, #7
 800176c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800176e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001774:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001778:	2200      	movs	r2, #0
 800177a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800177c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	69b8      	ldr	r0, [r7, #24]
 800178a:	f000 fc2b 	bl	8001fe4 <pxPortInitialiseStack>
 800178e:	4602      	mov	r2, r0
 8001790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001792:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800179a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800179e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80017a0:	bf00      	nop
 80017a2:	3720      	adds	r7, #32
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80017b0:	f000 fd0c 	bl	80021cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80017b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001860 <prvAddNewTaskToReadyList+0xb8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a29      	ldr	r2, [pc, #164]	@ (8001860 <prvAddNewTaskToReadyList+0xb8>)
 80017bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80017be:	4b29      	ldr	r3, [pc, #164]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80017c6:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80017cc:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <prvAddNewTaskToReadyList+0xb8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d110      	bne.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80017d4:	f000 fac4 	bl	8001d60 <prvInitialiseTaskLists>
 80017d8:	e00d      	b.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <prvAddNewTaskToReadyList+0xc0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017e2:	4b20      	ldr	r3, [pc, #128]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d802      	bhi.n	80017f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80017f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	@ (800186c <prvAddNewTaskToReadyList+0xc4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	3301      	adds	r3, #1
 80017fc:	4a1b      	ldr	r2, [pc, #108]	@ (800186c <prvAddNewTaskToReadyList+0xc4>)
 80017fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001804:	2201      	movs	r2, #1
 8001806:	409a      	lsls	r2, r3
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <prvAddNewTaskToReadyList+0xc8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4313      	orrs	r3, r2
 800180e:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <prvAddNewTaskToReadyList+0xc8>)
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	4a15      	ldr	r2, [pc, #84]	@ (8001874 <prvAddNewTaskToReadyList+0xcc>)
 8001820:	441a      	add	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3304      	adds	r3, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4610      	mov	r0, r2
 800182a:	f7ff fe0c 	bl	8001446 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800182e:	f000 fcfd 	bl	800222c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001832:	4b0d      	ldr	r3, [pc, #52]	@ (8001868 <prvAddNewTaskToReadyList+0xc0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00e      	beq.n	8001858 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800183a:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <prvAddNewTaskToReadyList+0xbc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <prvAddNewTaskToReadyList+0xd0>)
 800184a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000390 	.word	0x20000390
 8001864:	20000290 	.word	0x20000290
 8001868:	2000039c 	.word	0x2000039c
 800186c:	200003ac 	.word	0x200003ac
 8001870:	20000398 	.word	0x20000398
 8001874:	20000294 	.word	0x20000294
 8001878:	e000ed04 	.word	0xe000ed04

0800187c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d018      	beq.n	80018c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800188e:	4b14      	ldr	r3, [pc, #80]	@ (80018e0 <vTaskDelay+0x64>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <vTaskDelay+0x32>
	__asm volatile
 8001896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800189a:	f383 8811 	msr	BASEPRI, r3
 800189e:	f3bf 8f6f 	isb	sy
 80018a2:	f3bf 8f4f 	dsb	sy
 80018a6:	60bb      	str	r3, [r7, #8]
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80018ae:	f000 f87d 	bl	80019ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80018b2:	2100      	movs	r1, #0
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fb2f 	bl	8001f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80018ba:	f000 f885 	bl	80019c8 <xTaskResumeAll>
 80018be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80018c6:	4b07      	ldr	r3, [pc, #28]	@ (80018e4 <vTaskDelay+0x68>)
 80018c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	f3bf 8f4f 	dsb	sy
 80018d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200003b8 	.word	0x200003b8
 80018e4:	e000ed04 	.word	0xe000ed04

080018e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80018f6:	463a      	mov	r2, r7
 80018f8:	1d39      	adds	r1, r7, #4
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc26 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001904:	6839      	ldr	r1, [r7, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	9202      	str	r2, [sp, #8]
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	460a      	mov	r2, r1
 8001916:	491f      	ldr	r1, [pc, #124]	@ (8001994 <vTaskStartScheduler+0xac>)
 8001918:	481f      	ldr	r0, [pc, #124]	@ (8001998 <vTaskStartScheduler+0xb0>)
 800191a:	f7ff fe18 	bl	800154e <xTaskCreateStatic>
 800191e:	4603      	mov	r3, r0
 8001920:	4a1e      	ldr	r2, [pc, #120]	@ (800199c <vTaskStartScheduler+0xb4>)
 8001922:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <vTaskStartScheduler+0xb4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800192c:	2301      	movs	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	e001      	b.n	8001936 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d116      	bne.n	800196a <vTaskStartScheduler+0x82>
	__asm volatile
 800193c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001940:	f383 8811 	msr	BASEPRI, r3
 8001944:	f3bf 8f6f 	isb	sy
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	613b      	str	r3, [r7, #16]
}
 800194e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <vTaskStartScheduler+0xb8>)
 8001952:	f04f 32ff 	mov.w	r2, #4294967295
 8001956:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001958:	4b12      	ldr	r3, [pc, #72]	@ (80019a4 <vTaskStartScheduler+0xbc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800195e:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <vTaskStartScheduler+0xc0>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001964:	f000 fbc0 	bl	80020e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001968:	e00f      	b.n	800198a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001970:	d10b      	bne.n	800198a <vTaskStartScheduler+0xa2>
	__asm volatile
 8001972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001976:	f383 8811 	msr	BASEPRI, r3
 800197a:	f3bf 8f6f 	isb	sy
 800197e:	f3bf 8f4f 	dsb	sy
 8001982:	60fb      	str	r3, [r7, #12]
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	e7fd      	b.n	8001986 <vTaskStartScheduler+0x9e>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08002814 	.word	0x08002814
 8001998:	08001d31 	.word	0x08001d31
 800199c:	200003b4 	.word	0x200003b4
 80019a0:	200003b0 	.word	0x200003b0
 80019a4:	2000039c 	.word	0x2000039c
 80019a8:	20000394 	.word	0x20000394

080019ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <vTaskSuspendAll+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3301      	adds	r3, #1
 80019b6:	4a03      	ldr	r2, [pc, #12]	@ (80019c4 <vTaskSuspendAll+0x18>)
 80019b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200003b8 	.word	0x200003b8

080019c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019d6:	4b42      	ldr	r3, [pc, #264]	@ (8001ae0 <xTaskResumeAll+0x118>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10b      	bne.n	80019f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80019de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
 80019ee:	603b      	str	r3, [r7, #0]
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	e7fd      	b.n	80019f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019f6:	f000 fbe9 	bl	80021cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80019fa:	4b39      	ldr	r3, [pc, #228]	@ (8001ae0 <xTaskResumeAll+0x118>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	4a37      	ldr	r2, [pc, #220]	@ (8001ae0 <xTaskResumeAll+0x118>)
 8001a02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a04:	4b36      	ldr	r3, [pc, #216]	@ (8001ae0 <xTaskResumeAll+0x118>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d161      	bne.n	8001ad0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <xTaskResumeAll+0x11c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d05d      	beq.n	8001ad0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a14:	e02e      	b.n	8001a74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <xTaskResumeAll+0x120>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3318      	adds	r3, #24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fd6a 	bl	80014fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fd65 	bl	80014fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a36:	2201      	movs	r2, #1
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001aec <xTaskResumeAll+0x124>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	4a2a      	ldr	r2, [pc, #168]	@ (8001aec <xTaskResumeAll+0x124>)
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4a27      	ldr	r2, [pc, #156]	@ (8001af0 <xTaskResumeAll+0x128>)
 8001a52:	441a      	add	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3304      	adds	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7ff fcf3 	bl	8001446 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a64:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <xTaskResumeAll+0x12c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d302      	bcc.n	8001a74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8001a6e:	4b22      	ldr	r3, [pc, #136]	@ (8001af8 <xTaskResumeAll+0x130>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <xTaskResumeAll+0x120>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1cc      	bne.n	8001a16 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a82:	f000 fa0b 	bl	8001e9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <xTaskResumeAll+0x134>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d010      	beq.n	8001ab4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a92:	f000 f837 	bl	8001b04 <xTaskIncrementTick>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d002      	beq.n	8001aa2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <xTaskResumeAll+0x130>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f1      	bne.n	8001a92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <xTaskResumeAll+0x134>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <xTaskResumeAll+0x130>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001abc:	2301      	movs	r3, #1
 8001abe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b00 <xTaskResumeAll+0x138>)
 8001ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ad0:	f000 fbac 	bl	800222c <vPortExitCritical>

	return xAlreadyYielded;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003b8 	.word	0x200003b8
 8001ae4:	20000390 	.word	0x20000390
 8001ae8:	20000350 	.word	0x20000350
 8001aec:	20000398 	.word	0x20000398
 8001af0:	20000294 	.word	0x20000294
 8001af4:	20000290 	.word	0x20000290
 8001af8:	200003a4 	.word	0x200003a4
 8001afc:	200003a0 	.word	0x200003a0
 8001b00:	e000ed04 	.word	0xe000ed04

08001b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b0e:	4b4f      	ldr	r3, [pc, #316]	@ (8001c4c <xTaskIncrementTick+0x148>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 808f 	bne.w	8001c36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b18:	4b4d      	ldr	r3, [pc, #308]	@ (8001c50 <xTaskIncrementTick+0x14c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b20:	4a4b      	ldr	r2, [pc, #300]	@ (8001c50 <xTaskIncrementTick+0x14c>)
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d121      	bne.n	8001b70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b2c:	4b49      	ldr	r3, [pc, #292]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <xTaskIncrementTick+0x4a>
	__asm volatile
 8001b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b3a:	f383 8811 	msr	BASEPRI, r3
 8001b3e:	f3bf 8f6f 	isb	sy
 8001b42:	f3bf 8f4f 	dsb	sy
 8001b46:	603b      	str	r3, [r7, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <xTaskIncrementTick+0x46>
 8001b4e:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b40      	ldr	r3, [pc, #256]	@ (8001c58 <xTaskIncrementTick+0x154>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a3e      	ldr	r2, [pc, #248]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c58 <xTaskIncrementTick+0x154>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b3e      	ldr	r3, [pc, #248]	@ (8001c5c <xTaskIncrementTick+0x158>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a3c      	ldr	r2, [pc, #240]	@ (8001c5c <xTaskIncrementTick+0x158>)
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	f000 f996 	bl	8001e9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b70:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <xTaskIncrementTick+0x15c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d348      	bcc.n	8001c0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b7a:	4b36      	ldr	r3, [pc, #216]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b84:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <xTaskIncrementTick+0x15c>)
 8001b86:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8a:	601a      	str	r2, [r3, #0]
					break;
 8001b8c:	e03e      	b.n	8001c0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b8e:	4b31      	ldr	r3, [pc, #196]	@ (8001c54 <xTaskIncrementTick+0x150>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d203      	bcs.n	8001bae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <xTaskIncrementTick+0x15c>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001bac:	e02e      	b.n	8001c0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fca2 	bl	80014fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3318      	adds	r3, #24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fc99 	bl	80014fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	2201      	movs	r2, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <xTaskIncrementTick+0x160>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	4a22      	ldr	r2, [pc, #136]	@ (8001c64 <xTaskIncrementTick+0x160>)
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <xTaskIncrementTick+0x164>)
 8001bea:	441a      	add	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	3304      	adds	r3, #4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f7ff fc27 	bl	8001446 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <xTaskIncrementTick+0x168>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3b9      	bcc.n	8001b7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c0a:	e7b6      	b.n	8001b7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <xTaskIncrementTick+0x168>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c12:	4915      	ldr	r1, [pc, #84]	@ (8001c68 <xTaskIncrementTick+0x164>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d901      	bls.n	8001c28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <xTaskIncrementTick+0x16c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001c30:	2301      	movs	r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
 8001c34:	e004      	b.n	8001c40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001c36:	4b0f      	ldr	r3, [pc, #60]	@ (8001c74 <xTaskIncrementTick+0x170>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <xTaskIncrementTick+0x170>)
 8001c3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001c40:	697b      	ldr	r3, [r7, #20]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200003b8 	.word	0x200003b8
 8001c50:	20000394 	.word	0x20000394
 8001c54:	20000348 	.word	0x20000348
 8001c58:	2000034c 	.word	0x2000034c
 8001c5c:	200003a8 	.word	0x200003a8
 8001c60:	200003b0 	.word	0x200003b0
 8001c64:	20000398 	.word	0x20000398
 8001c68:	20000294 	.word	0x20000294
 8001c6c:	20000290 	.word	0x20000290
 8001c70:	200003a4 	.word	0x200003a4
 8001c74:	200003a0 	.word	0x200003a0

08001c78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c7e:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <vTaskSwitchContext+0xa4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <vTaskSwitchContext+0xa8>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c8c:	e040      	b.n	8001d10 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <vTaskSwitchContext+0xa8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c94:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <vTaskSwitchContext+0xac>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ca2:	7afb      	ldrb	r3, [r7, #11]
 8001ca4:	f1c3 031f 	rsb	r3, r3, #31
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	491f      	ldr	r1, [pc, #124]	@ (8001d28 <vTaskSwitchContext+0xb0>)
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10b      	bne.n	8001cd6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8001cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cc2:	f383 8811 	msr	BASEPRI, r3
 8001cc6:	f3bf 8f6f 	isb	sy
 8001cca:	f3bf 8f4f 	dsb	sy
 8001cce:	607b      	str	r3, [r7, #4]
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	e7fd      	b.n	8001cd2 <vTaskSwitchContext+0x5a>
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4a11      	ldr	r2, [pc, #68]	@ (8001d28 <vTaskSwitchContext+0xb0>)
 8001ce2:	4413      	add	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	3308      	adds	r3, #8
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d104      	bne.n	8001d06 <vTaskSwitchContext+0x8e>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a07      	ldr	r2, [pc, #28]	@ (8001d2c <vTaskSwitchContext+0xb4>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200003b8 	.word	0x200003b8
 8001d20:	200003a4 	.word	0x200003a4
 8001d24:	20000398 	.word	0x20000398
 8001d28:	20000294 	.word	0x20000294
 8001d2c:	20000290 	.word	0x20000290

08001d30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001d38:	f000 f852 	bl	8001de0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <prvIdleTask+0x28>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d9f9      	bls.n	8001d38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <prvIdleTask+0x2c>)
 8001d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001d54:	e7f0      	b.n	8001d38 <prvIdleTask+0x8>
 8001d56:	bf00      	nop
 8001d58:	20000294 	.word	0x20000294
 8001d5c:	e000ed04 	.word	0xe000ed04

08001d60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	e00c      	b.n	8001d86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <prvInitialiseTaskLists+0x60>)
 8001d78:	4413      	add	r3, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fb38 	bl	80013f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3301      	adds	r3, #1
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b06      	cmp	r3, #6
 8001d8a:	d9ef      	bls.n	8001d6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001d8c:	480d      	ldr	r0, [pc, #52]	@ (8001dc4 <prvInitialiseTaskLists+0x64>)
 8001d8e:	f7ff fb2f 	bl	80013f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001d92:	480d      	ldr	r0, [pc, #52]	@ (8001dc8 <prvInitialiseTaskLists+0x68>)
 8001d94:	f7ff fb2c 	bl	80013f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <prvInitialiseTaskLists+0x6c>)
 8001d9a:	f7ff fb29 	bl	80013f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001d9e:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <prvInitialiseTaskLists+0x70>)
 8001da0:	f7ff fb26 	bl	80013f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001da4:	480b      	ldr	r0, [pc, #44]	@ (8001dd4 <prvInitialiseTaskLists+0x74>)
 8001da6:	f7ff fb23 	bl	80013f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <prvInitialiseTaskLists+0x78>)
 8001dac:	4a05      	ldr	r2, [pc, #20]	@ (8001dc4 <prvInitialiseTaskLists+0x64>)
 8001dae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <prvInitialiseTaskLists+0x7c>)
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <prvInitialiseTaskLists+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000294 	.word	0x20000294
 8001dc4:	20000320 	.word	0x20000320
 8001dc8:	20000334 	.word	0x20000334
 8001dcc:	20000350 	.word	0x20000350
 8001dd0:	20000364 	.word	0x20000364
 8001dd4:	2000037c 	.word	0x2000037c
 8001dd8:	20000348 	.word	0x20000348
 8001ddc:	2000034c 	.word	0x2000034c

08001de0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001de6:	e019      	b.n	8001e1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001de8:	f000 f9f0 	bl	80021cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001dec:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <prvCheckTasksWaitingTermination+0x50>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3304      	adds	r3, #4
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fb7f 	bl	80014fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001e34 <prvCheckTasksWaitingTermination+0x54>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	4a0b      	ldr	r2, [pc, #44]	@ (8001e34 <prvCheckTasksWaitingTermination+0x54>)
 8001e06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <prvCheckTasksWaitingTermination+0x58>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <prvCheckTasksWaitingTermination+0x58>)
 8001e10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001e12:	f000 fa0b 	bl	800222c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f810 	bl	8001e3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <prvCheckTasksWaitingTermination+0x58>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e1      	bne.n	8001de8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000364 	.word	0x20000364
 8001e34:	20000390 	.word	0x20000390
 8001e38:	20000378 	.word	0x20000378

08001e3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fb4a 	bl	80024ec <vPortFree>
				vPortFree( pxTCB );
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb47 	bl	80024ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001e5e:	e019      	b.n	8001e94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d103      	bne.n	8001e72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fb3e 	bl	80024ec <vPortFree>
	}
 8001e70:	e010      	b.n	8001e94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d00b      	beq.n	8001e94 <prvDeleteTCB+0x58>
	__asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	60fb      	str	r3, [r7, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <prvDeleteTCB+0x54>
	}
 8001e94:	bf00      	nop
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ed4 <prvResetNextTaskUnblockTime+0x38>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d104      	bne.n	8001eb6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8001eae:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001eb4:	e008      	b.n	8001ec8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb6:	4b07      	ldr	r3, [pc, #28]	@ (8001ed4 <prvResetNextTaskUnblockTime+0x38>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <prvResetNextTaskUnblockTime+0x3c>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000348 	.word	0x20000348
 8001ed8:	200003b0 	.word	0x200003b0

08001edc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <xTaskGetSchedulerState+0x34>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001eea:	2301      	movs	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e008      	b.n	8001f02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <xTaskGetSchedulerState+0x38>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	607b      	str	r3, [r7, #4]
 8001efc:	e001      	b.n	8001f02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001f02:	687b      	ldr	r3, [r7, #4]
	}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000039c 	.word	0x2000039c
 8001f14:	200003b8 	.word	0x200003b8

08001f18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001f22:	4b29      	ldr	r3, [pc, #164]	@ (8001fc8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f28:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fae4 	bl	80014fc <uxListRemove>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10b      	bne.n	8001f52 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f40:	2201      	movs	r2, #1
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	4b21      	ldr	r3, [pc, #132]	@ (8001fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	4a20      	ldr	r2, [pc, #128]	@ (8001fd0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001f50:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d10a      	bne.n	8001f70 <prvAddCurrentTaskToDelayedList+0x58>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3304      	adds	r3, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	481a      	ldr	r0, [pc, #104]	@ (8001fd4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8001f6a:	f7ff fa6c 	bl	8001446 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001f6e:	e026      	b.n	8001fbe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001f70:	68fa      	ldr	r2, [r7, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d209      	bcs.n	8001f9c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f88:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3304      	adds	r3, #4
 8001f92:	4619      	mov	r1, r3
 8001f94:	4610      	mov	r0, r2
 8001f96:	f7ff fa79 	bl	800148c <vListInsert>
}
 8001f9a:	e010      	b.n	8001fbe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <prvAddCurrentTaskToDelayedList+0xc4>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fcc <prvAddCurrentTaskToDelayedList+0xb4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4610      	mov	r0, r2
 8001faa:	f7ff fa6f 	bl	800148c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001fae:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d202      	bcs.n	8001fbe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001fb8:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000394 	.word	0x20000394
 8001fcc:	20000290 	.word	0x20000290
 8001fd0:	20000398 	.word	0x20000398
 8001fd4:	2000037c 	.word	0x2000037c
 8001fd8:	2000034c 	.word	0x2000034c
 8001fdc:	20000348 	.word	0x20000348
 8001fe0:	200003b0 	.word	0x200003b0

08001fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3b04      	subs	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f023 0201 	bic.w	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	3b04      	subs	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002014:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <pxPortInitialiseStack+0x54>)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3b14      	subs	r3, #20
 800201e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3b20      	subs	r3, #32
 800202a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800202c:	68fb      	ldr	r3, [r7, #12]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	0800203d 	.word	0x0800203d

0800203c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002046:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <prvTaskExitError+0x54>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800204e:	d00b      	beq.n	8002068 <prvTaskExitError+0x2c>
	__asm volatile
 8002050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	60fb      	str	r3, [r7, #12]
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <prvTaskExitError+0x28>
	__asm volatile
 8002068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800206c:	f383 8811 	msr	BASEPRI, r3
 8002070:	f3bf 8f6f 	isb	sy
 8002074:	f3bf 8f4f 	dsb	sy
 8002078:	60bb      	str	r3, [r7, #8]
}
 800207a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800207c:	bf00      	nop
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0fc      	beq.n	800207e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	2000000c 	.word	0x2000000c
	...

080020a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <pxCurrentTCBConst2>)
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	6808      	ldr	r0, [r1, #0]
 80020a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80020aa:	f380 8809 	msr	PSP, r0
 80020ae:	f3bf 8f6f 	isb	sy
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f380 8811 	msr	BASEPRI, r0
 80020ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80020be:	4770      	bx	lr

080020c0 <pxCurrentTCBConst2>:
 80020c0:	20000290 	.word	0x20000290
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop

080020c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80020c8:	4806      	ldr	r0, [pc, #24]	@ (80020e4 <prvPortStartFirstTask+0x1c>)
 80020ca:	6800      	ldr	r0, [r0, #0]
 80020cc:	6800      	ldr	r0, [r0, #0]
 80020ce:	f380 8808 	msr	MSP, r0
 80020d2:	b662      	cpsie	i
 80020d4:	b661      	cpsie	f
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	f3bf 8f6f 	isb	sy
 80020de:	df00      	svc	0
 80020e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80020e2:	bf00      	nop
 80020e4:	e000ed08 	.word	0xe000ed08

080020e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80020ee:	4b32      	ldr	r3, [pc, #200]	@ (80021b8 <xPortStartScheduler+0xd0>)
 80020f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	22ff      	movs	r2, #255	@ 0xff
 80020fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002108:	78fb      	ldrb	r3, [r7, #3]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <xPortStartScheduler+0xd4>)
 8002114:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002116:	4b2a      	ldr	r3, [pc, #168]	@ (80021c0 <xPortStartScheduler+0xd8>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800211c:	e009      	b.n	8002132 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800211e:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <xPortStartScheduler+0xd8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3b01      	subs	r3, #1
 8002124:	4a26      	ldr	r2, [pc, #152]	@ (80021c0 <xPortStartScheduler+0xd8>)
 8002126:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	b2db      	uxtb	r3, r3
 8002136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800213a:	2b80      	cmp	r3, #128	@ 0x80
 800213c:	d0ef      	beq.n	800211e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <xPortStartScheduler+0xd8>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f1c3 0307 	rsb	r3, r3, #7
 8002146:	2b04      	cmp	r3, #4
 8002148:	d00b      	beq.n	8002162 <xPortStartScheduler+0x7a>
	__asm volatile
 800214a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800214e:	f383 8811 	msr	BASEPRI, r3
 8002152:	f3bf 8f6f 	isb	sy
 8002156:	f3bf 8f4f 	dsb	sy
 800215a:	60bb      	str	r3, [r7, #8]
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	e7fd      	b.n	800215e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002162:	4b17      	ldr	r3, [pc, #92]	@ (80021c0 <xPortStartScheduler+0xd8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	4a15      	ldr	r2, [pc, #84]	@ (80021c0 <xPortStartScheduler+0xd8>)
 800216a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800216c:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <xPortStartScheduler+0xd8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002174:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <xPortStartScheduler+0xd8>)
 8002176:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002180:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <xPortStartScheduler+0xdc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0f      	ldr	r2, [pc, #60]	@ (80021c4 <xPortStartScheduler+0xdc>)
 8002186:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800218a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800218c:	4b0d      	ldr	r3, [pc, #52]	@ (80021c4 <xPortStartScheduler+0xdc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0c      	ldr	r2, [pc, #48]	@ (80021c4 <xPortStartScheduler+0xdc>)
 8002192:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002196:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002198:	f000 f8b8 	bl	800230c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <xPortStartScheduler+0xe0>)
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80021a2:	f7ff ff91 	bl	80020c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80021a6:	f7ff fd67 	bl	8001c78 <vTaskSwitchContext>
	prvTaskExitError();
 80021aa:	f7ff ff47 	bl	800203c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	e000e400 	.word	0xe000e400
 80021bc:	200003bc 	.word	0x200003bc
 80021c0:	200003c0 	.word	0x200003c0
 80021c4:	e000ed20 	.word	0xe000ed20
 80021c8:	2000000c 	.word	0x2000000c

080021cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
	__asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	607b      	str	r3, [r7, #4]
}
 80021e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <vPortEnterCritical+0x58>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3301      	adds	r3, #1
 80021ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002224 <vPortEnterCritical+0x58>)
 80021ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <vPortEnterCritical+0x58>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d110      	bne.n	800221a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80021f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <vPortEnterCritical+0x5c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00b      	beq.n	800221a <vPortEnterCritical+0x4e>
	__asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	603b      	str	r3, [r7, #0]
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	e7fd      	b.n	8002216 <vPortEnterCritical+0x4a>
	}
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	2000000c 	.word	0x2000000c
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002232:	4b12      	ldr	r3, [pc, #72]	@ (800227c <vPortExitCritical+0x50>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10b      	bne.n	8002252 <vPortExitCritical+0x26>
	__asm volatile
 800223a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223e:	f383 8811 	msr	BASEPRI, r3
 8002242:	f3bf 8f6f 	isb	sy
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	607b      	str	r3, [r7, #4]
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	e7fd      	b.n	800224e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002252:	4b0a      	ldr	r3, [pc, #40]	@ (800227c <vPortExitCritical+0x50>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	3b01      	subs	r3, #1
 8002258:	4a08      	ldr	r2, [pc, #32]	@ (800227c <vPortExitCritical+0x50>)
 800225a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800225c:	4b07      	ldr	r3, [pc, #28]	@ (800227c <vPortExitCritical+0x50>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d105      	bne.n	8002270 <vPortExitCritical+0x44>
 8002264:	2300      	movs	r3, #0
 8002266:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800226e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	2000000c 	.word	0x2000000c

08002280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002280:	f3ef 8009 	mrs	r0, PSP
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <pxCurrentTCBConst>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002290:	6010      	str	r0, [r2, #0]
 8002292:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002296:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800229a:	f380 8811 	msr	BASEPRI, r0
 800229e:	f7ff fceb 	bl	8001c78 <vTaskSwitchContext>
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f380 8811 	msr	BASEPRI, r0
 80022aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80022ae:	6819      	ldr	r1, [r3, #0]
 80022b0:	6808      	ldr	r0, [r1, #0]
 80022b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022b6:	f380 8809 	msr	PSP, r0
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	4770      	bx	lr

080022c0 <pxCurrentTCBConst>:
 80022c0:	20000290 	.word	0x20000290
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop

080022c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
	__asm volatile
 80022ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d2:	f383 8811 	msr	BASEPRI, r3
 80022d6:	f3bf 8f6f 	isb	sy
 80022da:	f3bf 8f4f 	dsb	sy
 80022de:	607b      	str	r3, [r7, #4]
}
 80022e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80022e2:	f7ff fc0f 	bl	8001b04 <xTaskIncrementTick>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <xPortSysTickHandler+0x40>)
 80022ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	2300      	movs	r3, #0
 80022f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	f383 8811 	msr	BASEPRI, r3
}
 80022fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	e000ed04 	.word	0xe000ed04

0800230c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002310:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <vPortSetupTimerInterrupt+0x30>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002316:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <vPortSetupTimerInterrupt+0x34>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <vPortSetupTimerInterrupt+0x38>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a09      	ldr	r2, [pc, #36]	@ (8002348 <vPortSetupTimerInterrupt+0x3c>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	099b      	lsrs	r3, r3, #6
 8002328:	4a08      	ldr	r2, [pc, #32]	@ (800234c <vPortSetupTimerInterrupt+0x40>)
 800232a:	3b01      	subs	r3, #1
 800232c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800232e:	4b03      	ldr	r3, [pc, #12]	@ (800233c <vPortSetupTimerInterrupt+0x30>)
 8002330:	2207      	movs	r2, #7
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	e000e010 	.word	0xe000e010
 8002340:	e000e018 	.word	0xe000e018
 8002344:	20000000 	.word	0x20000000
 8002348:	10624dd3 	.word	0x10624dd3
 800234c:	e000e014 	.word	0xe000e014

08002350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800235c:	f7ff fb26 	bl	80019ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002360:	4b5c      	ldr	r3, [pc, #368]	@ (80024d4 <pvPortMalloc+0x184>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002368:	f000 f924 	bl	80025b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800236c:	4b5a      	ldr	r3, [pc, #360]	@ (80024d8 <pvPortMalloc+0x188>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4013      	ands	r3, r2
 8002374:	2b00      	cmp	r3, #0
 8002376:	f040 8095 	bne.w	80024a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01e      	beq.n	80023be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002380:	2208      	movs	r2, #8
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	2b00      	cmp	r3, #0
 8002390:	d015      	beq.n	80023be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f023 0307 	bic.w	r3, r3, #7
 8002398:	3308      	adds	r3, #8
 800239a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <pvPortMalloc+0x6e>
	__asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	617b      	str	r3, [r7, #20]
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	e7fd      	b.n	80023ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d06f      	beq.n	80024a4 <pvPortMalloc+0x154>
 80023c4:	4b45      	ldr	r3, [pc, #276]	@ (80024dc <pvPortMalloc+0x18c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d86a      	bhi.n	80024a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80023ce:	4b44      	ldr	r3, [pc, #272]	@ (80024e0 <pvPortMalloc+0x190>)
 80023d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80023d2:	4b43      	ldr	r3, [pc, #268]	@ (80024e0 <pvPortMalloc+0x190>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023d8:	e004      	b.n	80023e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80023e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d903      	bls.n	80023f6 <pvPortMalloc+0xa6>
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f1      	bne.n	80023da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80023f6:	4b37      	ldr	r3, [pc, #220]	@ (80024d4 <pvPortMalloc+0x184>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d051      	beq.n	80024a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2208      	movs	r2, #8
 8002406:	4413      	add	r3, r2
 8002408:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	1ad2      	subs	r2, r2, r3
 800241a:	2308      	movs	r3, #8
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	429a      	cmp	r2, r3
 8002420:	d920      	bls.n	8002464 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00b      	beq.n	800244c <pvPortMalloc+0xfc>
	__asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	613b      	str	r3, [r7, #16]
}
 8002446:	bf00      	nop
 8002448:	bf00      	nop
 800244a:	e7fd      	b.n	8002448 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1ad2      	subs	r2, r2, r3
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800245e:	69b8      	ldr	r0, [r7, #24]
 8002460:	f000 f90a 	bl	8002678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002464:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <pvPortMalloc+0x18c>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4a1b      	ldr	r2, [pc, #108]	@ (80024dc <pvPortMalloc+0x18c>)
 8002470:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <pvPortMalloc+0x18c>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <pvPortMalloc+0x194>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d203      	bcs.n	8002486 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800247e:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <pvPortMalloc+0x18c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a18      	ldr	r2, [pc, #96]	@ (80024e4 <pvPortMalloc+0x194>)
 8002484:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <pvPortMalloc+0x188>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	431a      	orrs	r2, r3
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800249a:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <pvPortMalloc+0x198>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3301      	adds	r3, #1
 80024a0:	4a11      	ldr	r2, [pc, #68]	@ (80024e8 <pvPortMalloc+0x198>)
 80024a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80024a4:	f7ff fa90 	bl	80019c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <pvPortMalloc+0x17a>
	__asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	60fb      	str	r3, [r7, #12]
}
 80024c4:	bf00      	nop
 80024c6:	bf00      	nop
 80024c8:	e7fd      	b.n	80024c6 <pvPortMalloc+0x176>
	return pvReturn;
 80024ca:	69fb      	ldr	r3, [r7, #28]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3728      	adds	r7, #40	@ 0x28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000fcc 	.word	0x20000fcc
 80024d8:	20000fe0 	.word	0x20000fe0
 80024dc:	20000fd0 	.word	0x20000fd0
 80024e0:	20000fc4 	.word	0x20000fc4
 80024e4:	20000fd4 	.word	0x20000fd4
 80024e8:	20000fd8 	.word	0x20000fd8

080024ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d04f      	beq.n	800259e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80024fe:	2308      	movs	r3, #8
 8002500:	425b      	negs	r3, r3
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	4413      	add	r3, r2
 8002506:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <vPortFree+0xbc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10b      	bne.n	8002532 <vPortFree+0x46>
	__asm volatile
 800251a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	60fb      	str	r3, [r7, #12]
}
 800252c:	bf00      	nop
 800252e:	bf00      	nop
 8002530:	e7fd      	b.n	800252e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <vPortFree+0x66>
	__asm volatile
 800253a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800253e:	f383 8811 	msr	BASEPRI, r3
 8002542:	f3bf 8f6f 	isb	sy
 8002546:	f3bf 8f4f 	dsb	sy
 800254a:	60bb      	str	r3, [r7, #8]
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	e7fd      	b.n	800254e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <vPortFree+0xbc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d01e      	beq.n	800259e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d11a      	bne.n	800259e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4b0e      	ldr	r3, [pc, #56]	@ (80025a8 <vPortFree+0xbc>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	43db      	mvns	r3, r3
 8002572:	401a      	ands	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002578:	f7ff fa18 	bl	80019ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <vPortFree+0xc0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4413      	add	r3, r2
 8002586:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <vPortFree+0xc0>)
 8002588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800258a:	6938      	ldr	r0, [r7, #16]
 800258c:	f000 f874 	bl	8002678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002590:	4b07      	ldr	r3, [pc, #28]	@ (80025b0 <vPortFree+0xc4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	4a06      	ldr	r2, [pc, #24]	@ (80025b0 <vPortFree+0xc4>)
 8002598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800259a:	f7ff fa15 	bl	80019c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000fe0 	.word	0x20000fe0
 80025ac:	20000fd0 	.word	0x20000fd0
 80025b0:	20000fdc 	.word	0x20000fdc

080025b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80025ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80025c0:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <prvHeapInit+0xac>)
 80025c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f003 0307 	and.w	r3, r3, #7
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00c      	beq.n	80025e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3307      	adds	r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0307 	bic.w	r3, r3, #7
 80025da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002660 <prvHeapInit+0xac>)
 80025e4:	4413      	add	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002664 <prvHeapInit+0xb0>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <prvHeapInit+0xb0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4413      	add	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002600:	2208      	movs	r2, #8
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f023 0307 	bic.w	r3, r3, #7
 800260e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4a15      	ldr	r2, [pc, #84]	@ (8002668 <prvHeapInit+0xb4>)
 8002614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <prvHeapInit+0xb4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800261e:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <prvHeapInit+0xb4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	1ad2      	subs	r2, r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <prvHeapInit+0xb4>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a0a      	ldr	r2, [pc, #40]	@ (800266c <prvHeapInit+0xb8>)
 8002642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a09      	ldr	r2, [pc, #36]	@ (8002670 <prvHeapInit+0xbc>)
 800264a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <prvHeapInit+0xc0>)
 800264e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002652:	601a      	str	r2, [r3, #0]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	200003c4 	.word	0x200003c4
 8002664:	20000fc4 	.word	0x20000fc4
 8002668:	20000fcc 	.word	0x20000fcc
 800266c:	20000fd4 	.word	0x20000fd4
 8002670:	20000fd0 	.word	0x20000fd0
 8002674:	20000fe0 	.word	0x20000fe0

08002678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002680:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <prvInsertBlockIntoFreeList+0xa8>)
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	e002      	b.n	800268c <prvInsertBlockIntoFreeList+0x14>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d8f7      	bhi.n	8002686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d108      	bne.n	80026ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	441a      	add	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	68ba      	ldr	r2, [r7, #8]
 80026c4:	441a      	add	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d118      	bne.n	8002700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	4b14      	ldr	r3, [pc, #80]	@ (8002724 <prvInsertBlockIntoFreeList+0xac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d00d      	beq.n	80026f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	441a      	add	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e008      	b.n	8002708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80026f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002724 <prvInsertBlockIntoFreeList+0xac>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	e003      	b.n	8002708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	429a      	cmp	r2, r3
 800270e:	d002      	beq.n	8002716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000fc4 	.word	0x20000fc4
 8002724:	20000fcc 	.word	0x20000fcc

08002728 <memset>:
 8002728:	4603      	mov	r3, r0
 800272a:	4402      	add	r2, r0
 800272c:	4293      	cmp	r3, r2
 800272e:	d100      	bne.n	8002732 <memset+0xa>
 8002730:	4770      	bx	lr
 8002732:	f803 1b01 	strb.w	r1, [r3], #1
 8002736:	e7f9      	b.n	800272c <memset+0x4>

08002738 <__libc_init_array>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	2600      	movs	r6, #0
 800273c:	4d0c      	ldr	r5, [pc, #48]	@ (8002770 <__libc_init_array+0x38>)
 800273e:	4c0d      	ldr	r4, [pc, #52]	@ (8002774 <__libc_init_array+0x3c>)
 8002740:	1b64      	subs	r4, r4, r5
 8002742:	10a4      	asrs	r4, r4, #2
 8002744:	42a6      	cmp	r6, r4
 8002746:	d109      	bne.n	800275c <__libc_init_array+0x24>
 8002748:	f000 f81a 	bl	8002780 <_init>
 800274c:	2600      	movs	r6, #0
 800274e:	4d0a      	ldr	r5, [pc, #40]	@ (8002778 <__libc_init_array+0x40>)
 8002750:	4c0a      	ldr	r4, [pc, #40]	@ (800277c <__libc_init_array+0x44>)
 8002752:	1b64      	subs	r4, r4, r5
 8002754:	10a4      	asrs	r4, r4, #2
 8002756:	42a6      	cmp	r6, r4
 8002758:	d105      	bne.n	8002766 <__libc_init_array+0x2e>
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002760:	4798      	blx	r3
 8002762:	3601      	adds	r6, #1
 8002764:	e7ee      	b.n	8002744 <__libc_init_array+0xc>
 8002766:	f855 3b04 	ldr.w	r3, [r5], #4
 800276a:	4798      	blx	r3
 800276c:	3601      	adds	r6, #1
 800276e:	e7f2      	b.n	8002756 <__libc_init_array+0x1e>
 8002770:	08002840 	.word	0x08002840
 8002774:	08002840 	.word	0x08002840
 8002778:	08002840 	.word	0x08002840
 800277c:	08002844 	.word	0x08002844

08002780 <_init>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr

0800278c <_fini>:
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	bf00      	nop
 8002790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002792:	bc08      	pop	{r3}
 8002794:	469e      	mov	lr, r3
 8002796:	4770      	bx	lr
